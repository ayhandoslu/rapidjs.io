body {
  font-family: 'Source Sans Pro', sans-serif;
  padding: 0;
  margin: 0;
}

*,
*:after,
*:before {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

.wrapper {
  max-width: auto;
  margin: 0 auto;
}

.wrapper .container {
  width: auto;
  margin: 0 auto;
  padding: 20px;
}

@media screen and (min-width: 640px) {
  .wrapper {
    width: 640px;
  }
}

@media screen and (min-width: 1024px) {
  .wrapper {
    width: 1024px;
  }
}

@media screen and (min-width: 1180px) {
  .wrapper {
    width: 1180px;
  }
}

.header {
  border-bottom: solid 1px #f4f4f4;
  margin-bottom: 20px;
}

.header__inner {
  margin: 0 auto;
  padding: 20px;
}

.header .rapidjs-logo {
  font-size: 32px;
  font-family: 'Miriam Libre', sans-serif;
}

.header .rapidjs-logo span {
  color: #539bb9;
}

@media screen and (min-width: 640px) {
  .header__inner {
    width: 640px;
  }
}

@media screen and (min-width: 1024px) {
  .header__inner {
    width: 1024px;
  }
}

@media screen and (min-width: 1180px) {
  .header__inner {
    width: 1180px;
  }
}

/*# sourceMappingURL=data:application/json;base64, */